{-# LANGUAGE InstanceSigs #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}

module Kyu2.Imperative (
) where

import Control.Monad.State
import Control.Monad
import Data.Map as M

newtype SomeMonad a = SomeMonad (State (Integer, (Map Integer Integer)) a) deriving (Applicative, Monad)
newtype SomeVariable = SomeVariable {getInt :: Integer} 

instance Functor SomeMonad where
  fmap f (SomeMonad st)= SomeMonad (fmap f st)

def :: SomeMonad SomeVariable -> Integer
def (SomeMonad m) = getInt $ evalState m 0 
var :: Integer -> SomeMonad SomeVariable
var n = SomeMonad (state (\i -> (SomeVariable n, i)))
lit :: Integer -> SomeVariable
lit = SomeVariable

while :: SomeVariable -> (Integer -> Bool) -> SomeMonad () -> SomeMonad ()
while v p action = when (p $ getInt v) $ action >> while v p action 

-- (+=) :: SomeVariable -> SomeVariable -> SomeMonad ()
-- a += b = SomeMonad (state (\() -> (SomeVariable (getInt a + getInt b), ())))
-- a -= b = SomeVariable (getInt a -= getInt b) 
-- a *= b = SomeVariable (getInt a *= getInt b) 

--
com = def $ do
  a <- var 1
  b <- var 2
  return b

main = print com
